import { BufferedLog, IdleDetector, Instrumentation, InstrumentationContext, InstrumentedAppMethods, InstrumentedAppOptions, LogCollector, LogCollectorOptions, MetricsCollector, Nextgen, OperationMode, PayloadProvider, Schema, SchematizedPayload } from '../interfaces';
import { AutomaticClickTracker } from './AutomaticClickTracker';
import { LogPromptListener, SchematizedData } from 'o11y/shared';
export declare class NextgenImpl implements Nextgen {
    private readonly _idleDetector;
    private readonly _logCollectors;
    private readonly _instruments;
    private readonly _seqBySchema;
    private _sequence;
    private _appInstr;
    private _autoClickTracker;
    private _metricsCollector;
    private _appPayloadProvider;
    private _pagePayloadProvider;
    private _forceDisabledLogCollectors;
    private _logCollectorFailures;
    private static _collectorFailureLimit;
    private _isBufferingEnabled;
    private _buffer;
    private readonly _logCollectionListeners;
    private _clientSessionId;
    private _opMode;
    private _isSender;
    private _isReceiver;
    private _metricsStore;
    private _receiverConnector;
    get pagePayloadProvider(): PayloadProvider;
    set pagePayloadProvider(provider: PayloadProvider);
    get appPayloadProvider(): PayloadProvider;
    set appPayloadProvider(provider: PayloadProvider);
    constructor(_idleDetector: IdleDetector);
    registerApp(name: string, options?: InstrumentedAppOptions): InstrumentedAppMethods;
    getInstrumentation(name: string): Instrumentation;
    get appName(): string;
    addLog(loggerName: string, schema: Schema, data: SchematizedData, timestamp: number, rootId: string, pagePayload: SchematizedPayload, appPayload: SchematizedPayload): number;
    private _multiplex;
    getBuffer(): BufferedLog[];
    disableBuffering(): void;
    getClickTracker(): AutomaticClickTracker;
    getDefaultInstrumentationContext(): InstrumentationContext;
    activateClickTracker(): void;
    deactivateClickTracker(): void;
    registerLogCollector(collector: LogCollector, options?: LogCollectorOptions): void;
    registerMetricsCollector(collector: MetricsCollector): void;
    private _getAllUpCounters;
    private _getAllValueRecorders;
    private _getAllBucketHistograms;
    registerForLogPrompt(listener: LogPromptListener): void;
    promptLogCollection(reason: string): void;
    getClientSessionId(): string;
    private _initOpMode;
    getOperationMode(): OperationMode;
}
