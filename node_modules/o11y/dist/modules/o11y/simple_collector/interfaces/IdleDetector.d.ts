import { IdleDetectorReport } from './IdleDetectorReport';
export declare type IdleDetectedListener = (timestamp: number) => void;
export declare type DoneNotifier = () => void;
export declare type IsBusyChecker = () => boolean;
export declare type ReportListener = (report: IdleDetectorReport) => void;
export declare type ErrorListener = (error: unknown, userText?: string) => void;
export interface TaskerSingle {
    readonly isBusy: boolean;
    done: DoneNotifier;
}
export interface TaskerMulti {
    readonly isBusy: boolean;
    done: DoneNotifier;
    add: () => void;
}
export interface IdleDetector {
    requestIdleDetectedCallback(callback: IdleDetectedListener): void;
    declareNotifierTaskSingle(name: string): TaskerSingle;
    declareNotifierTaskMulti(name: string, existingBusyCount?: number): TaskerMulti;
    declarePollableTaskMulti(name: string, isBusyChecker: IsBusyChecker): void;
    getReport?: () => IdleDetectorReport;
    registerReportListener?: (callback: ReportListener) => void;
}
