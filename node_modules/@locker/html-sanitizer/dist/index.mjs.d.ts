import { SandboxKey } from '@locker/shared';
import createDOMPurify from "dompurify";
import { HookEvent, Config, DOMPurifyI, HookName, SanitizeAttributeHookEvent } from "dompurify";
type BaseDOMPurifyConfigName = "NODE_ALL_IN_PLACE" | "NODE_SVG" | "STRING_BLOB_HTML";
interface DOMPurifyConfig extends Config {
    // Add CUSTOM_ELEMENT_HANDLING types until @types/dompurify is updated.
    CUSTOM_ELEMENT_HANDLING?: {
        tagNameCheck?: RegExp | ((tagName: string) => boolean) | null;
        attributeNameCheck?: RegExp | ((tagName: string) => boolean) | null;
        allowCustomizedBuiltInElements?: boolean;
    };
}
interface DOMPurifyInterface extends DOMPurifyI {
}
type HookCallback = (currentNode: Element, data: HookEvent, config: Config) => void;
type HooksRegistry = Record<HookName, HookCallback>;
type NormalizedHref = {
    normalizedFragment: string;
    normalizedURL: string;
    protocol: string;
    requestedFragment: string;
    requestedURL: string;
};
declare function getSanitizerForConfig(sandboxKey: SandboxKey, configName: BaseDOMPurifyConfigName): DOMPurifyInterface;
declare function sanitizeSvgTextReturnDOM(dirty: string): DocumentFragment;
declare function sanitizeSvgHref(url: string): string;
// Sanitize a URL representing a SVG href attribute value.
declare function uponSanitizeAttribute(node: Node, data: HookEvent, _config: DOMPurifyConfig): createDOMPurify.HookEvent;
declare function blobSanitizer(sandboxKey: SandboxKey): ReturnType<typeof getSanitizerForConfig>;
export { getSanitizerForConfig, sanitizeSvgHref, sanitizeSvgTextReturnDOM, uponSanitizeAttribute, blobSanitizer, BaseDOMPurifyConfigName, DOMPurifyConfig, DOMPurifyInterface, HookCallback, HooksRegistry, NormalizedHref };
export type { HookEvent, HookName, SanitizeAttributeHookEvent };
