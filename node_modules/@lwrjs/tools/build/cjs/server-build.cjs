var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/tools/src/server-build.ts
__markAsModule(exports);
__export(exports, {
  buildServer: () => buildServer
});
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_esbuild = __toModule(require("esbuild"));
var import_perf_hooks = __toModule(require("perf_hooks"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_config = __toModule(require("@lwrjs/config"));
var import_generate_entry_plugin = __toModule(require("./plugins/generate-entry-plugin.cjs"));
var import_build_server_plugin = __toModule(require("./plugins/build-server-plugin.cjs"));
async function build(buildOptions, config) {
  const {outputDir, normalizedOutputDir, minify} = buildOptions;
  await import_esbuild.default.build({
    entryPoints: ["./lwr.entry.js"],
    bundle: true,
    minify,
    sourcemap: true,
    format: "cjs",
    platform: "node",
    logLevel: "silent",
    mainFields: ["module", "main"],
    external: [
      "node:*",
      "fsevents",
      "iltorb",
      "shrink-ray-current",
      "esbuild*",
      "esinstall",
      "@lwrjs/loader"
    ],
    banner: {
      js: createEnvVarHeader()
    },
    plugins: [(0, import_generate_entry_plugin.default)(), (0, import_build_server_plugin.default)(config, outputDir)],
    outfile: import_path.default.join(normalizedOutputDir, "ssr.js")
  });
}
async function buildServer(configArg, options) {
  const startTime = import_perf_hooks.performance.now();
  const outputDir = options?.outputDir || "/build";
  const normalizedOutputDir = import_path.default.join(configArg?.rootDir || process.cwd(), outputDir);
  await import_fs_extra.default.ensureDir(normalizedOutputDir);
  await build({outputDir, normalizedOutputDir, minify: !!options?.minify}, configArg);
  const endTime = import_perf_hooks.performance.now();
  const timeDiff = endTime - startTime;
  import_shared_utils.logger.info(`[Server Build] successfully built the server in ${Math.round(timeDiff)} ms`);
}
function createEnvVarHeader() {
  const currentFeatureFlags = (0, import_shared_utils.getFeatureFlags)();
  let initFeatureFlagsString = "";
  for (const [key, val] of Object.entries(currentFeatureFlags)) {
    if (val) {
      initFeatureFlagsString += `process.env.${key} = 'true';`;
    }
  }
  const LWR_VERSION_ASSIGNMENT = `globalThis.LWR_VERSION='${import_config.LWR_VERSION}';`;
  const LWC_VERSION_ASSIGNMENT = `globalThis.LWC_VERSION='${import_config.LWC_VERSION}';`;
  return `${LWR_VERSION_ASSIGNMENT}${LWC_VERSION_ASSIGNMENT}${initFeatureFlagsString}`;
}
