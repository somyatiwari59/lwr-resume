import path from 'path';
import fs from 'fs-extra';
import esbuild from 'esbuild';
import { performance } from 'perf_hooks';
import { getFeatureFlags, logger } from '@lwrjs/shared-utils';
import { LWR_VERSION, LWC_VERSION } from '@lwrjs/config';
import generateLwrEntry from './plugins/generate-entry-plugin.js';
import buildLwrServer from './plugins/build-server-plugin.js';
async function build(buildOptions, config) {
    const { outputDir, normalizedOutputDir, minify } = buildOptions;
    // building specifically for MRT/Lambda
    await esbuild.build({
        entryPoints: ['./lwr.entry.js'],
        bundle: true,
        minify,
        sourcemap: true,
        format: 'cjs',
        platform: 'node',
        logLevel: 'silent',
        // Alow us to roll up additional require() dependencies
        mainFields: ['module', 'main'],
        external: [
            // node native dependencies
            'node:*',
            // fsevents used by chokidar used by nunjucks
            'fsevents',
            // Used for express compression.  Should be an optional dependency and should be omitted at runtime
            'iltorb',
            'shrink-ray-current',
            // These dependencies are not needed to serve a basic generated site, but they are still excluded
            // in case there is a need to add a custom module provider.
            'esbuild*',
            'esinstall',
            // We can remove this once we have the module bundler working
            '@lwrjs/loader',
        ],
        banner: {
            js: createEnvVarHeader(),
        },
        plugins: [generateLwrEntry(), buildLwrServer(config, outputDir)],
        // MRT expects an entry point named `ssr.js`
        outfile: path.join(normalizedOutputDir, 'ssr.js'),
    });
}
/**
 * Resolve configurations, generate a server build module, and bundle
 * the LWR server.  The bundled server will be written to the file system.
 *
 * @param {LwrGlobalConfig} configArg - programmatic LWR global config
 * @param {BuildOptions} options - server build options
 */
export async function buildServer(configArg, options) {
    const startTime = performance.now();
    const outputDir = options?.outputDir || '/build';
    const normalizedOutputDir = path.join(configArg?.rootDir || process.cwd(), outputDir);
    await fs.ensureDir(normalizedOutputDir);
    await build({ outputDir, normalizedOutputDir, minify: !!options?.minify }, configArg);
    const endTime = performance.now();
    const timeDiff = endTime - startTime;
    logger.info(`[Server Build] successfully built the server in ${Math.round(timeDiff)} ms`);
}
/**
 * Build in important environment variables set during build
 */
function createEnvVarHeader() {
    // Setup global environment variables
    const currentFeatureFlags = getFeatureFlags();
    let initFeatureFlagsString = '';
    for (const [key, val] of Object.entries(currentFeatureFlags)) {
        if (val) {
            initFeatureFlagsString += `process.env.${key} = 'true';`;
        }
    }
    const LWR_VERSION_ASSIGNMENT = `globalThis.LWR_VERSION='${LWR_VERSION}';`;
    const LWC_VERSION_ASSIGNMENT = `globalThis.LWC_VERSION='${LWC_VERSION}';`;
    return `${LWR_VERSION_ASSIGNMENT}${LWC_VERSION_ASSIGNMENT}${initFeatureFlagsString}`;
}
//# sourceMappingURL=server-build.js.map