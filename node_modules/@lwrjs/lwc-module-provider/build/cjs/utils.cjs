var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-module-provider/src/utils.ts
__markAsModule(exports);
__export(exports, {
  DEFAULT_IMPLICIT_DEP: () => DEFAULT_IMPLICIT_DEP,
  EXPLICIT_CONSTANT: () => EXPLICIT_CONSTANT,
  isImplicitLwcImport: () => isImplicitLwcImport,
  resolveModuleSpecifier: () => resolveModuleSpecifier,
  setUpWatcher: () => setUpWatcher
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_module_resolver = __toModule(require("@lwc/module-resolver"));
var EXPLICIT_CONSTANT = "/* _implicit_dependency_ */";
var DEFAULT_IMPLICIT_DEP = `${EXPLICIT_CONSTANT} export default void 0`;
function resolveModuleSpecifier(specifier, importer, modules = [], packageVersionCache) {
  import_shared_utils.logger.debug("[lwc-module-provider] resolveModuleSpecifier", {specifier, importer, modules});
  let resolvedModule;
  try {
    resolvedModule = (0, import_module_resolver.resolveModule)(specifier, importer, {modules});
  } catch (error) {
    if (import_shared_utils.logger.currentLevel == import_shared_utils.DEBUG || import_shared_utils.logger.currentLevel == import_shared_utils.VERBOSE) {
      import_shared_utils.logger.debug(`[lwc-module-provider] @lwc/module-resolver/resolveModule ${specifier}`);
      import_shared_utils.logger.error(error);
    }
    throw error;
  }
  import_shared_utils.logger.debug("[lwc-module-provider] resolveModuleSpecifier:resolvedModule", {resolvedModule});
  const moduleScope = resolvedModule.scope;
  let version;
  if (packageVersionCache.has(moduleScope)) {
    version = packageVersionCache.get(moduleScope);
  } else {
    const json = (0, import_shared_utils.readFile)(import_path.default.join(moduleScope, "package.json"));
    version = JSON.parse(json).version;
    packageVersionCache.set(moduleScope, version);
  }
  return {...resolvedModule, version};
}
function isImplicitLwcImport(entry, specifier) {
  const [, fileRelativePathQs] = specifier.split("#");
  const fileRelativePath = fileRelativePathQs?.split("?")[0];
  if (!fileRelativePath || import_fs.default.existsSync(entry)) {
    return false;
  }
  const ext = import_path.default.extname(fileRelativePath);
  if (fileRelativePath.endsWith(".scoped.css")) {
    return true;
  }
  if (ext !== ".html" && ext !== ".css") {
    return false;
  }
  const parts = fileRelativePath.split("/");
  if (parts.length > 1) {
    if (ext === ".html") {
      const importerJsEntry = entry.replace(".html", ".js");
      const importerTsEntry = entry.replace(".html", ".ts");
      return import_fs.default.existsSync(importerJsEntry) || import_fs.default.existsSync(importerTsEntry);
    } else {
      const importerHtmlEntry = entry.replace(".css", ".html");
      const importerJsEntry = entry.replace(".css", ".js");
      const importerTsEntry = entry.replace(".css", ".ts");
      return import_fs.default.existsSync(importerHtmlEntry) || import_fs.default.existsSync(importerJsEntry) || import_fs.default.existsSync(importerTsEntry);
    }
  }
  return true;
}
function setUpWatcher(watcherFactory, onModuleChange) {
  const watcher = watcherFactory.createFileWatcher();
  watcher.on("change", (0, import_shared_utils.debounce)((file) => onModuleChange(file), 500));
  watcher.on("unlink", (0, import_shared_utils.debounce)((file) => onModuleChange(file), 500));
  watcher.on("add", (file) => import_shared_utils.logger.info(`Watching: ${file}`));
  return watcher;
}
