var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/middleware/asset-middleware.ts
__markAsModule(exports);
__export(exports, {
  assetMiddleware: () => assetMiddleware
});
var import_path = __toModule(require("path"));
var import_identity = __toModule(require("./utils/identity.cjs"));
var import_error_handling = __toModule(require("./utils/error-handling.cjs"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
function createAssetMiddleware(context) {
  const {
    assetRegistry,
    runtimeEnvironment: {basePath}
  } = context;
  return async (req, res, next) => {
    const {runtimeEnvironment} = req.getRuntimeContext(context.runtimeEnvironment);
    const {assetId, immutable, signature} = (0, import_identity.getAssetIdentity)(req);
    if (basePath && !assetId.specifier.startsWith(basePath)) {
      assetId.specifier = import_path.default.join(basePath, assetId.specifier);
    }
    try {
      const assetUri = await assetRegistry.resolveAssetUri(assetId, runtimeEnvironment);
      if (assetUri.external) {
        res.set({
          Location: assetUri.uri,
          "cache-control": "public, max-age=60"
        });
        res.sendStatus(302);
        return;
      }
      const asset = await assetRegistry.getAsset({...assetId, signature}, runtimeEnvironment, req.isSiteGeneration());
      if (req.isSiteGeneration()) {
        res.setSiteGenerationMetadata({asset});
      }
      if (asset.mime) {
        res.type(asset.mime);
      }
      if (runtimeEnvironment.immutableAssets && immutable) {
        res.setHeader("Cache-control", "public, max-age=12895706, immutable");
      } else if (runtimeEnvironment.immutableAssets) {
        res.setHeader("Cache-control", "public, max-age=60");
      }
      res.status(200).stream(asset.stream());
    } catch (error) {
      if (import_path.default.dirname(assetId.specifier) === (basePath ? basePath : "/") && error instanceof import_diagnostics.DiagnosticsError && error?.diagnostics[0]?.description.category === "lwrUnresolvable/asset") {
        await next();
        return;
      }
      throw error;
    }
  };
}
function assetMiddleware(app, context) {
  const paths = context.appConfig.assets.map((config) => {
    const assetDirConfig = config;
    let urlPath = config.urlPath;
    if (assetDirConfig.root) {
      urlPath = "/:filename";
    } else if (assetDirConfig.dir) {
      urlPath += app.getRegexWildcard();
    }
    return urlPath;
  });
  app.get([
    ...[...new Set(paths)],
    "/:apiVersion/:assetType(asset|content-asset)/:immutable?/s/:signature/" + app.getRegexWildcard(),
    "/:apiVersion/:assetType(asset|content-asset)/:immutable?/" + app.getRegexWildcard()
  ], (0, import_error_handling.handleErrors)(createAssetMiddleware(context)));
}
