import path from 'path';
import { getAssetIdentity } from './utils/identity.js';
import { handleErrors } from './utils/error-handling.js';
import { DiagnosticsError } from '@lwrjs/diagnostics';
function createAssetMiddleware(context) {
    const { assetRegistry, runtimeEnvironment: { basePath }, } = context;
    return async (req, res, next) => {
        const { runtimeEnvironment } = req.getRuntimeContext(context.runtimeEnvironment);
        const { assetId, immutable, signature } = getAssetIdentity(req);
        if (basePath && !assetId.specifier.startsWith(basePath)) {
            assetId.specifier = path.join(basePath, assetId.specifier);
        }
        try {
            // Redirect if this is an external asset
            const assetUri = await assetRegistry.resolveAssetUri(assetId, runtimeEnvironment);
            if (assetUri.external) {
                res.set({
                    Location: assetUri.uri,
                    'cache-control': 'public, max-age=60',
                });
                res.sendStatus(302);
                return;
            }
            const asset = await assetRegistry.getAsset({ ...assetId, signature }, runtimeEnvironment, req.isSiteGeneration());
            if (req.isSiteGeneration()) {
                res.setSiteGenerationMetadata({ asset });
            }
            if (asset.mime) {
                res.type(asset.mime);
            }
            if (runtimeEnvironment.immutableAssets && immutable) {
                res.setHeader('Cache-control', 'public, max-age=12895706, immutable');
            }
            else if (runtimeEnvironment.immutableAssets) {
                res.setHeader('Cache-control', 'public, max-age=60');
            }
            res.status(200).stream(asset.stream());
        }
        catch (error) {
            // Ignore asset not found for root asset requests
            if (path.dirname(assetId.specifier) === (basePath ? basePath : '/') &&
                error instanceof DiagnosticsError &&
                error?.diagnostics[0]?.description.category === 'lwrUnresolvable/asset') {
                // Must await other middleware or this can respond before expected.
                await next();
                return;
            }
            // else throw the error
            throw error;
        }
    };
}
export function assetMiddleware(app, context) {
    const paths = context.appConfig.assets.map((config) => {
        const assetDirConfig = config;
        let urlPath = config.urlPath;
        // If this is a root config add a /:filename path to match any file in the root.  The middleware will fall through if there is no match.
        if (assetDirConfig.root) {
            urlPath = '/:filename';
        }
        else if (assetDirConfig.dir) {
            urlPath += app.getRegexWildcard();
        }
        return urlPath;
    });
    app.get([
        // De-dupe paths (i.e. root path may have been added more than once)
        ...[...new Set(paths)],
        '/:apiVersion/:assetType(asset|content-asset)/:immutable?/s/:signature/' + app.getRegexWildcard(),
        '/:apiVersion/:assetType(asset|content-asset)/:immutable?/' + app.getRegexWildcard(),
    ], handleErrors(createAssetMiddleware(context)));
}
//# sourceMappingURL=asset-middleware.js.map