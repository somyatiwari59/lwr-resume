import { LATEST_SIGNATURE } from '@lwrjs/shared-utils';
import { descriptions } from '@lwrjs/diagnostics';
import { getRequestImporter } from './utils/request.js';
import { getModuleIdentity } from './utils/identity.js';
import { normalizeResolvedUris } from './utils/metadata.js';
import { createUnsignedBundleRedirect } from './redirects/unsigned-module-redirect.js';
import { handleErrors } from './utils/error-handling.js';
function createBundleMiddleware(context) {
    const { moduleRegistry, moduleBundler } = context;
    const unsignedBundleRedirect = createUnsignedBundleRedirect(moduleBundler);
    return async (req, res) => {
        if (!req.validateEnvironmentRequest(context.appConfig)) {
            res.status(400);
            res.send(descriptions.UNRESOLVABLE.INVALID_ENVIRONMENT(req.params.environment).message);
            return;
        }
        if (!req.validateJsonRequest()) {
            res.status(400);
            res.send(descriptions.UNRESOLVABLE.INVALID_JSON().message);
            return;
        }
        const { runtimeEnvironment, runtimeParams } = req.getRuntimeContext(context.runtimeEnvironment);
        const importer = req.query.importer ? await getRequestImporter(req, moduleRegistry) : undefined;
        const { moduleId, signature } = getModuleIdentity(req, importer);
        if (moduleId.importer || !signature) {
            await unsignedBundleRedirect(req, res, moduleId, runtimeEnvironment, runtimeParams);
            return;
        }
        const sourceMapUrl = req.path.replace('/bundle/', '/sourcemaps/bundle/');
        const bundleDefinition = await moduleBundler.getModuleBundle(moduleId, 
        // bundle must be `true` to properly resolve bundles in amd
        { ...runtimeEnvironment, bundle: true, sourceMapUrl }, runtimeParams);
        if (req.isSiteGeneration()) {
            res.setSiteGenerationMetadata({
                moduleDefinition: bundleDefinition,
                resolvedUris: await normalizeResolvedUris(bundleDefinition, runtimeEnvironment, runtimeParams, moduleBundler, moduleRegistry),
            });
        }
        if (signature !== LATEST_SIGNATURE) {
            res.setHeader('Cache-control', 'public, max-age=31536000, immutable');
        }
        res.status(200).type('application/javascript').send(bundleDefinition.code);
    };
}
function createSourceMapMiddleware(context) {
    const { moduleBundler } = context;
    return async (req, res) => {
        if (!req.validateEnvironmentRequest(context.appConfig)) {
            res.status(400);
            res.send(descriptions.UNRESOLVABLE.INVALID_ENVIRONMENT(req.params.environment).message);
            return;
        }
        const { runtimeEnvironment } = req.getRuntimeContext(context.runtimeEnvironment);
        const { moduleId, signature } = getModuleIdentity(req);
        const bundleDef = await moduleBundler.getModuleBundle(moduleId, runtimeEnvironment);
        if (signature !== LATEST_SIGNATURE) {
            res.setHeader('Cache-control', 'public, max-age=31536000, immutable');
        }
        res.status(200).type('application/json').send(bundleDef.map);
    };
}
export function bundleMiddleware(app, context) {
    app.get([
        `/:apiVersion/bundle/:format/:compat?/l/:locale/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/l/:locale/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/l/:locale/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/l/:locale/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/bundle/:format/:compat?/l/:locale/e/:environment/bi/:bundleSpecifier/module/mi/:specifier`,
        `/:apiVersion/bundle/:format/:compat?/l/:locale/bi/:bundleSpecifier/module/mi/:specifier`,
        `/:apiVersion/bundle/:format/:compat?/e/:environment/bi/:bundleSpecifier/module/mi/:specifier`,
        `/:apiVersion/bundle/:format/:compat?/bi/:bundleSpecifier/module/mi/:specifier`,
    ], handleErrors(createBundleMiddleware(context)));
    app.get([
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/l/:locale/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/l/:locale/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/l/:locale/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/l/:locale/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/e/:environment/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/bi/:bundleSpecifier/module/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/sourcemaps/bundle/:format/:compat?/bi/:bundleSpecifier/module/mi/:specifier/s/:signature/:prettyUrl?`,
    ], handleErrors(createSourceMapMiddleware(context)));
}
//# sourceMappingURL=bundle-middleware.js.map