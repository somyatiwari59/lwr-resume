import { LwrAssetRegistry } from '@lwrjs/asset-registry';
import { LwrModuleBundler } from '@lwrjs/module-bundler';
import { LwrModuleRegistry } from '@lwrjs/module-registry';
import { LwrResourceRegistry } from '@lwrjs/resource-registry';
import { LwrApplicationObserver } from '@lwrjs/shared-utils';
import { LwrViewRegistry } from '@lwrjs/view-registry';
// dependency chokidar in this package.json is to statisfy the optional dependency in shared-utils for fs-watch.
import { WatcherFactoryImpl } from '@lwrjs/shared-utils/fs-watch';
export function createServerContext(appConfig, runtimeEnvironment, globalData) {
    const appObserver = new LwrApplicationObserver();
    const appEmitter = appObserver.createLwrEmitter();
    const assetRegistry = new LwrAssetRegistry({
        appObserver,
        appEmitter,
        runtimeEnvironment,
    }, appConfig);
    const moduleRegistry = new LwrModuleRegistry({
        appObserver,
        appEmitter,
        runtimeEnvironment,
    }, appConfig);
    const moduleBundler = new LwrModuleBundler({ moduleRegistry, appObserver }, appConfig);
    const resourceRegistry = new LwrResourceRegistry();
    const viewRegistry = new LwrViewRegistry({
        moduleRegistry,
        moduleBundler,
        resourceRegistry,
        assetRegistry,
        appObserver,
        appEmitter,
        globalData,
        runtimeEnvironment,
    }, appConfig);
    const watcherFactory = new WatcherFactoryImpl();
    return {
        appObserver,
        appEmitter,
        moduleRegistry,
        moduleBundler,
        resourceRegistry,
        assetRegistry,
        viewRegistry,
        watcherFactory,
        appConfig,
        runtimeEnvironment,
        routeHandlers: {},
    };
}
//# sourceMappingURL=server.js.map