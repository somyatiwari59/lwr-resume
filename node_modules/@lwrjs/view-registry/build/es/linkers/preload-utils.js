import { explodeSpecifier, getGroupName, getVersionedModuleId, normalizeVersionToUri, logger, VERSION_NOT_PROVIDED, getSpecifier, isGroupie, } from '@lwrjs/shared-utils';
/**
 * keeps track of preloadModules metadata
 */
export function setPreloadModulesMeta(specifier, uri, groups, preloads) {
    // We need to support versionless preloadModules, including versionless rootComponents.
    // Removing the "/v/version_not_provided" hack from the preloadModules specifier
    // because otherwise the loader will wait for that module that will never get defined.
    // TODO: remove pending W-12702948
    const [removedVersion, version] = specifier.split('/v/');
    const normalizedSpecifier = version === VERSION_NOT_PROVIDED ? removedVersion : specifier;
    specifier = normalizedSpecifier;
    const preloadModulesSpecifiers = preloads.specifiers;
    const preloadBundleGroupsMap = preloads.groups;
    const preloadModulesURIs = preloads.uris;
    preloadModulesSpecifiers.push(specifier);
    const { specifier: unversionedSpecifier } = explodeSpecifier(specifier);
    const groupName = getGroupName(unversionedSpecifier, groups);
    if (groupName && preloadBundleGroupsMap.has(groupName)) {
        return;
    }
    // With bundling groups, we only want to include one URI
    preloadModulesURIs.push(uri);
    groupName && preloadBundleGroupsMap.set(groupName, true);
}
/**
 * Recursively gets preloadModules metadata starting with a specifer
 * Note: don't call me unless you got bundles
 */
export async function getPreloadModulesMeta(specifier, // unversioned specifier
viewPreloads, bundleConfig, moduleRegistry, defRegistry, runtimeEnvironment, runtimeParams, pending) {
    const { exclude = [], external = {}, groups = {} } = bundleConfig;
    const isExternal = function (rawSpecifier) {
        const { specifier } = explodeSpecifier(rawSpecifier);
        return Object.keys(external).includes(specifier);
    };
    const isExclude = function (specifier) {
        return exclude.includes(specifier);
    };
    if (isExternal(specifier)) {
        logger.warn(`"${specifier}" is configured in both bundleConfig.externals and bootstrap.preloadModules. We are treating it as external.`);
    }
    else {
        // eslint-disable-next-line no-await-in-loop
        const versionedModuleId = await getVersionedModuleId(specifier, moduleRegistry); // TODO replace moduleRegistry with defRegistry
        const versionedModuleSpecifier = getSpecifier({
            specifier,
            version: normalizeVersionToUri(versionedModuleId.version),
        });
        const uri = 
        // eslint-disable-next-line no-await-in-loop
        await defRegistry.resolveModuleUri(versionedModuleId, runtimeEnvironment, runtimeParams);
        // fallback to unversioned specifier if needed
        const normalizedSpecifier = versionedModuleId.version === VERSION_NOT_PROVIDED ? specifier : versionedModuleSpecifier;
        setPreloadModulesMeta(normalizedSpecifier, uri, groups, viewPreloads);
        if (exclude.length || Object.keys(groups).length) {
            // check if we need to also preload any excluded dependencies of this preload module
            const preloadModuleRecord = await defRegistry.getModuleBundle(versionedModuleId, runtimeEnvironment, runtimeParams);
            const { imports } = preloadModuleRecord.bundleRecord;
            if (imports) {
                if (!pending) {
                    pending = new Map();
                }
                for (let i = 0; i < imports.length; i++) {
                    const imp = imports[i];
                    if (!pending.has(imp.specifier) &&
                        (isExclude(imp.specifier) || isGroupie(imp.specifier, groups))) {
                        pending.set(imp.specifier, true); // prevent dupe calls
                        // eslint-disable-next-line no-await-in-loop
                        await getPreloadModulesMeta(imp.specifier, viewPreloads, bundleConfig, moduleRegistry, defRegistry, runtimeEnvironment, runtimeParams, pending);
                    }
                }
            }
        }
    }
}
//# sourceMappingURL=preload-utils.js.map