import { logger } from '@lwrjs/shared-utils';
import esbuildEsm from 'esbuild';
import features from '@lwc/features';
// In certain envs, this default import is not compiled correctly
const lwcFeatureFlags = 'default' in features ? features.default : features;
// Set every LWC feature flag to false, so that the unused code can be tree-shaken
const lwcFeatureFlagDefinitions = Object.fromEntries(Object.keys(lwcFeatureFlags).map((feature) => [`lwcRuntimeFlags.${feature}`, 'false']));
// https://github.com/evanw/esbuild/issues/706
// Fixed in 0.11.0 but upgrading past 0.9.7 has caused breaking changes for consumers...
// https://github.com/salesforce-experience-platform-emu/lwr/issues/1014
let esbuild = esbuildEsm;
if (!esbuildEsm) {
    try {
        esbuild = require('esbuild');
    }
    catch {
        /* this is to support mjs/cjs dual impl */
    }
}
/**
 * Minification via esbuild.
 * When importing this module make sure the optional library 'esbuild' is installed.
 */
export async function minifyJavascript(source) {
    try {
        const { code } = await esbuild.transform(source, {
            loader: 'js',
            minify: true,
            // Remove assertions by tree shaking the computed expression
            define: {
                'process.env.NODE_ENV': JSON.stringify('production'),
                ...lwcFeatureFlagDefinitions,
            },
        });
        return code;
    }
    catch (error) {
        logger.debug(error);
        throw error;
    }
}
/**
 * Parse source to remove process.env.NODE_ENV without minify
 */
export async function parseJavascript(source, options) {
    try {
        const { code } = await esbuild.transform(source, {
            loader: 'js',
            minify: false,
            // Remove assertions by tree shaking the computed expression
            define: {
                'process.env.NODE_ENV': JSON.stringify(options.envMode),
                ...lwcFeatureFlagDefinitions,
            },
        });
        return code;
    }
    catch (error) {
        logger.debug(error);
        throw error;
    }
}
//# sourceMappingURL=esbuild-utils.js.map