var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-bundler/src/index.ts
__markAsModule(exports);
__export(exports, {
  LwrModuleBundler: () => LwrModuleBundler
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var TASK_POOL = new import_shared_utils.TaskPool();
var LwrModuleBundler = class {
  constructor(config, globalConfig) {
    this.cache = new Map();
    this.providers = [];
    this.transformers = [];
    this.inflightBundleDefinitions = new import_shared_utils.InflightTasks();
    this.moduleRegistry = config.moduleRegistry;
    this.appObserver = config.appObserver;
    this.bundleConfig = Object.freeze(globalConfig.bundleConfig);
    this.appObserver?.onModuleDefinitionChange(() => {
      this.cache.clear();
    });
  }
  addBundleProviders(providers) {
    this.providers.push(...providers);
  }
  addBundleTransformers(transformers) {
    this.transformers.push(...transformers);
  }
  async getModuleBundle(moduleId, runtimeEnvironment, runtimeParams = {}, bundleConfigOverrides) {
    const {format, minify, debug} = runtimeEnvironment;
    const cacheKey = `${moduleId.specifier}|${moduleId.version}|${(0, import_shared_utils.getCacheKeyFromJson)({
      locale: runtimeParams.locale,
      format,
      minify,
      debug,
      bundleConfigOverrides
    })}`;
    const cacheDisabled = process.env.NOCACHE === "true";
    if (!cacheDisabled) {
      if (this.cache.has(cacheKey)) {
        const bundleDef = this.cache.get(cacheKey);
        return bundleDef;
      }
    }
    return this.inflightBundleDefinitions.execute(cacheKey, () => {
      return TASK_POOL.execute(async () => {
        for (const bundler of this.providers) {
          const bundleDef = await bundler.bundle(moduleId, runtimeEnvironment, runtimeParams, bundleConfigOverrides);
          if (bundleDef) {
            if (!cacheDisabled) {
              this.cache.set(cacheKey, bundleDef);
            }
            return bundleDef;
          }
        }
        throw (0, import_diagnostics.createSingleDiagnosticError)({
          description: import_diagnostics.descriptions.UNRESOLVABLE.BUNDLE(moduleId.specifier)
        }, import_diagnostics.LwrUnresolvableError);
      }, this);
    });
  }
  async resolveModuleUri(moduleId, runtimeEnvironment, runtimeParams, signature) {
    const bundleDefinition = await this.getModuleBundle(moduleId, runtimeEnvironment, runtimeParams);
    if (!bundleDefinition) {
      throw (0, import_diagnostics.createSingleDiagnosticError)({
        description: import_diagnostics.descriptions.UNRESOLVABLE.BUNDLE(moduleId.specifier)
      }, import_diagnostics.LwrUnresolvableError);
    }
    let uri;
    if (bundleDefinition.src) {
      uri = bundleDefinition.src;
    } else {
      let resolvedVersion = moduleId.version || bundleDefinition.version;
      if (!resolvedVersion) {
        const {version} = await this.moduleRegistry.getModuleEntry(moduleId);
        resolvedVersion = version;
      }
      uri = String(await this.moduleRegistry.resolveModuleUri({...moduleId, version: resolvedVersion}, runtimeEnvironment, runtimeParams, signature));
    }
    const bundleUri = {
      artifactType: "bundle",
      uri: (0, import_path.join)(runtimeEnvironment.basePath || "", uri),
      immutable: runtimeEnvironment.immutableAssets,
      entry: uri
    };
    for (const transformPlugin of this.transformers) {
      const resolveUriResult = await transformPlugin.transformUri?.(bundleUri, bundleDefinition, runtimeEnvironment);
      if (resolveUriResult && resolveUriResult.uri) {
        uri = resolveUriResult.uri;
      }
    }
    return uri;
  }
  getPublicApi() {
    return {
      getModuleBundle: this.getModuleBundle.bind(this),
      resolveModuleUri: this.resolveModuleUri.bind(this)
    };
  }
};
