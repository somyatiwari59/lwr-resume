import { logger, mimeLookup } from '@lwrjs/shared-utils';
import path from 'path';
import fs from 'fs-extra';
export default class StaticResourceProvider {
    constructor(_config, context) {
        this.name = 'static-resource-provider';
        if (!context.siteMetadata) {
            throw new Error(`[${this.name}] Site metadata was not found`);
        }
        this.resourceRegistry = context.resourceRegistry;
        this.siteResources = context.siteMetadata.getSiteResources();
        this.siteRootDir = context.siteMetadata.getSiteRootDir();
    }
    async getResource(resourceIdentity, runtimeEnvironment) {
        const metadata = this.siteResources.resources[resourceIdentity.specifier];
        if (!metadata) {
            logger.warn(`[${this.name}] Did not find requested specifier ${resourceIdentity.specifier}`);
            return undefined;
        }
        const resourcePath = path.join(this.siteRootDir, metadata.path);
        // Figure out mime type
        const type = metadata.mimeType || mimeLookup(resourcePath) || 'application/javascript';
        return {
            type,
            // Have to make the loader shim code available for SSR
            stream: () => {
                logger.info(`[${this.name}] Resource read from lambda ${resourceIdentity.specifier}`);
                return fs.createReadStream(resourcePath);
            },
            src: resourcePath,
            inline: metadata.inline,
        };
    }
}
//# sourceMappingURL=static-resource-provider.js.map