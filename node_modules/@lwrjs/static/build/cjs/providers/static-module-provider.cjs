var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/providers/static-module-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => static_module_provider_default
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_static_utils = __toModule(require("../utils/static-utils.cjs"));
var StaticModuleProvider = class {
  constructor(_config, context) {
    this.name = "static-module-provider";
    if (!context.siteMetadata) {
      throw new Error(`[${this.name}] Site metadata was not found`);
    }
    this.externals = Object.keys(context.config.bundleConfig.external || {});
    this.siteBundles = context.siteMetadata.getSiteBundles();
    this.siteRootDir = context.siteMetadata.getSiteRootDir();
    this.fingerprintIndex = buildFingerprintsIndex(context);
  }
  async getModule(moduleId) {
    const {specifier} = moduleId;
    const metadata = this.siteBundles.bundles[specifier];
    if (metadata) {
      import_shared_utils.logger.warn(`[${this.name}] We should not be asking for module source we have in our site metadata ${moduleId.specifier}`);
      return void 0;
    }
    return void 0;
  }
  async getModuleEntry(moduleId) {
    const {specifier, version} = moduleId;
    const metadata = this.siteBundles.bundles[specifier];
    if (metadata) {
      import_shared_utils.logger.info(`[${this.name}] Module Entry request for static bundle ${specifier}`);
      const bundlePath = import_path.default.join(this.siteRootDir, metadata.path);
      const resolvedVersion = (0, import_static_utils.resolveStaticBundleVersion)(metadata.version, version);
      return {
        id: (0, import_shared_utils.getSpecifier)({...moduleId, version: resolvedVersion}),
        version: resolvedVersion,
        specifier,
        entry: "entry-not-provided",
        src: bundlePath
      };
    } else if (this.externals.includes(specifier)) {
      const resolvedVersion = (0, import_static_utils.resolveStaticBundleVersion)(void 0, version);
      return {
        id: (0, import_shared_utils.getSpecifier)({...moduleId, version: resolvedVersion}),
        version: resolvedVersion,
        specifier,
        entry: "entry-not-provided"
      };
    } else if (this.fingerprintIndex[specifier]) {
      return this.fingerprintIndex[specifier];
    }
    return void 0;
  }
};
var static_module_provider_default = StaticModuleProvider;
function buildFingerprintsIndex(context) {
  const fingerprintIndex = {};
  if (!context.runtimeEnvironment.featureFlags.LEGACY_LOADER) {
    const bundles = context.siteMetadata?.getSiteBundles().bundles || {};
    for (const bundle of Object.values(bundles)) {
      const bundlePath = import_path.default.join(String(context.siteMetadata?.getSiteRootDir()), bundle.path);
      const includedModules = bundle.includedModules || [];
      for (const includedModule of includedModules) {
        const moduleId = (0, import_shared_utils.explodeSpecifier)(includedModule);
        if (!fingerprintIndex[moduleId.specifier]) {
          fingerprintIndex[moduleId.specifier] = {
            id: (0, import_shared_utils.getSpecifier)(moduleId),
            version: (0, import_static_utils.resolveStaticBundleVersion)(moduleId.version),
            specifier: moduleId.specifier,
            entry: "entry-not-provided",
            src: bundlePath
          };
        }
      }
    }
  }
  return fingerprintIndex;
}
