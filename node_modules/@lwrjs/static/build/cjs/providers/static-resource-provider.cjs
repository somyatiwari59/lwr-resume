var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/providers/static-resource-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => static_resource_provider_default
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var StaticResourceProvider = class {
  constructor(_config, context) {
    this.name = "static-resource-provider";
    if (!context.siteMetadata) {
      throw new Error(`[${this.name}] Site metadata was not found`);
    }
    this.resourceRegistry = context.resourceRegistry;
    this.siteResources = context.siteMetadata.getSiteResources();
    this.siteRootDir = context.siteMetadata.getSiteRootDir();
  }
  async getResource(resourceIdentity, runtimeEnvironment) {
    const metadata = this.siteResources.resources[resourceIdentity.specifier];
    if (!metadata) {
      import_shared_utils.logger.warn(`[${this.name}] Did not find requested specifier ${resourceIdentity.specifier}`);
      return void 0;
    }
    const resourcePath = import_path.default.join(this.siteRootDir, metadata.path);
    const type = metadata.mimeType || (0, import_shared_utils.mimeLookup)(resourcePath) || "application/javascript";
    return {
      type,
      stream: () => {
        import_shared_utils.logger.info(`[${this.name}] Resource read from lambda ${resourceIdentity.specifier}`);
        return import_fs_extra.default.createReadStream(resourcePath);
      },
      src: resourcePath,
      inline: metadata.inline
    };
  }
};
var static_resource_provider_default = StaticResourceProvider;
