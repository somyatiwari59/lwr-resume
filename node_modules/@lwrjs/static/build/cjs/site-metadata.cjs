var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/site-metadata.ts
__markAsModule(exports);
__export(exports, {
  SiteMetadataImpl: () => SiteMetadataImpl
});
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var SITE_METADATA_PATH = ".metadata";
var STATIC_BUNDLE_METADATA_PATH = import_path.default.join(SITE_METADATA_PATH, "/bundle-metadata.json");
var STATIC_RESOURCE_METADATA_PATH = import_path.default.join(SITE_METADATA_PATH, "/resource-metadata.json");
var STATIC_ASSET_METADATA_PATH = import_path.default.join(SITE_METADATA_PATH, "/asset-metadata.json");
var SiteMetadataImpl = class {
  constructor(options) {
    this.options = options;
    this.siteBundles = this.readStaticBundleMetadata(options.rootDir);
    this.siteResources = this.readStaticResourceMetadata(options.rootDir);
    this.siteAssets = this.readStaticAssetsMetadata(options.rootDir);
  }
  getSiteRootDir() {
    return this.options.rootDir;
  }
  getSiteBundles() {
    return this.siteBundles;
  }
  getSiteResources() {
    return this.siteResources;
  }
  getSiteAssets() {
    return this.siteAssets;
  }
  async persistSiteMetadata() {
    const siteMetadataPath = import_path.default.join(this.options.rootDir, SITE_METADATA_PATH);
    try {
      if (!await import_fs_extra.default.pathExists(siteMetadataPath)) {
        await import_fs_extra.default.mkdir(siteMetadataPath, {recursive: true});
      }
      const bundleMetadataPath = import_path.default.join(this.options.rootDir, STATIC_BUNDLE_METADATA_PATH);
      await import_fs_extra.default.writeJSON(bundleMetadataPath, this.siteBundles, {spaces: 2});
      const resourceMetadataPath = import_path.default.join(this.options.rootDir, STATIC_RESOURCE_METADATA_PATH);
      await import_fs_extra.default.writeJSON(resourceMetadataPath, this.siteResources, {spaces: 2});
      const assetMetadataPath = import_path.default.join(this.options.rootDir, STATIC_ASSET_METADATA_PATH);
      return import_fs_extra.default.writeJSON(assetMetadataPath, this.siteAssets, {spaces: 2});
    } catch (err) {
      console.error(`[SiteMetadata] Failed to save site metadata ${siteMetadataPath}`);
      console.error(err);
    }
  }
  readStaticBundleMetadata(staticRoot) {
    let bundleMetadataPath;
    let siteBundles = {bundles: {}};
    try {
      bundleMetadataPath = import_path.default.join(staticRoot, STATIC_BUNDLE_METADATA_PATH);
      const savedMetadata = import_fs_extra.default.readJSONSync(bundleMetadataPath);
      siteBundles = savedMetadata;
    } catch (error) {
      if (error.code === "ENOENT") {
        import_shared_utils.logger.debug(`[SiteMetadata] Failed to load Static Bundle Metadata: ${bundleMetadataPath}`);
      } else {
        throw error;
      }
    }
    return siteBundles;
  }
  readStaticResourceMetadata(staticRoot) {
    let resourceMetadataPath;
    let siteResources = {resources: {}};
    try {
      resourceMetadataPath = import_path.default.join(staticRoot, STATIC_RESOURCE_METADATA_PATH);
      const savedMetadata = import_fs_extra.default.readJSONSync(resourceMetadataPath);
      siteResources = savedMetadata;
    } catch (error) {
      if (error.code === "ENOENT") {
        import_shared_utils.logger.debug(`[SiteMetadata] Failed to load Static Resource Metadata: ${resourceMetadataPath}`);
      } else {
        throw error;
      }
    }
    return siteResources;
  }
  readStaticAssetsMetadata(staticRoot) {
    let assetMetadataPath;
    let siteAssets = {
      assets: {}
    };
    try {
      assetMetadataPath = import_path.default.join(staticRoot, STATIC_ASSET_METADATA_PATH);
      siteAssets = import_fs_extra.default.readJSONSync(assetMetadataPath);
    } catch (error) {
      if (error.code === "ENOENT") {
        import_shared_utils.logger.debug(`[SiteMetadata] Failed to load Static Resource Metadata: ${assetMetadataPath}`);
      } else {
        throw error;
      }
    }
    return siteAssets;
  }
};
