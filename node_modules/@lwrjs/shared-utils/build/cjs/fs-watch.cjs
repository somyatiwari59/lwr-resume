var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/fs-watch.ts
__markAsModule(exports);
__export(exports, {
  WatcherFactoryImpl: () => WatcherFactoryImpl
});
var import_chokidar = __toModule(require("chokidar"));
var import_object = __toModule(require("./object.cjs"));
var import_logger = __toModule(require("./logger.cjs"));
var WatcherFactoryImpl = class {
  createFileWatcher(options = {persistent: true, ignored: "**/node_modules/**"}) {
    return import_chokidar.default.watch([], options);
  }
  setupWatcher(onModuleChange) {
    const fileWatcher = this.createFileWatcher();
    fileWatcher.on("change", (0, import_object.debounce)((file) => onModuleChange(file), 500));
    fileWatcher.on("unlink", (0, import_object.debounce)((file) => onModuleChange(file), 500));
    fileWatcher.on("add", (file) => import_logger.logger.info(`Watching: ${file}`));
    return fileWatcher;
  }
};
