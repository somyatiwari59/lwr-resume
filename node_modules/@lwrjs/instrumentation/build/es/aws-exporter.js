import { ExportResultCode, hrTimeToMilliseconds, hrTimeToTimeStamp } from '@opentelemetry/core';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { MetricsSender } from '@salesforce/pwa-kit-runtime/utils/ssr-server/metrics-sender.js';
import { ViewSpan } from './spans.js';
const DEFAULT_DIMENSIONS = {
    Project: process.env.MOBIFY_PROPERTY_ID,
    Target: process.env.DEPLOY_TARGET,
};
// only report metrics that are used for graphs
const SUPPORTED_SPANS = new Set([ViewSpan.Render, ViewSpan.ServerSideRender, ViewSpan.GetPageData]);
function toCustomMetrics(span) {
    const metrics = [];
    if (span.name === ViewSpan.Render && span.status.code > 0) {
        metrics.push({
            name: 'RenderErrors',
            dimensions: DEFAULT_DIMENSIONS,
            timestamp: new Date(hrTimeToTimeStamp(span.startTime)),
            unit: 'Count',
            value: 1,
        });
    }
    if (span.name === ViewSpan.ServerSideRender && span.status.code > 0) {
        metrics.push({
            name: 'RenderFallbackTime',
            dimensions: DEFAULT_DIMENSIONS,
            timestamp: new Date(hrTimeToTimeStamp(span.startTime)),
            unit: 'Milliseconds',
            value: hrTimeToMilliseconds(span.duration),
        });
    }
    if (span.name === ViewSpan.GetPageData) {
        const metric = {
            name: 'ExternalRequestTime',
            dimensions: DEFAULT_DIMENSIONS,
            timestamp: new Date(hrTimeToTimeStamp(span.startTime)),
            unit: 'Milliseconds',
            value: hrTimeToMilliseconds(span.duration),
        };
        metrics.push(metric);
        if (span.status.code > 0) {
            metrics.push({
                ...metric,
                name: 'ExternalRequestFailed',
            });
        }
    }
    return metrics;
}
export class AWSExporter {
    constructor() {
        this.metricsSender = MetricsSender.getSender();
        this.isShutdown = false;
        this.isLambda = process.env.AWS_LAMBDA_FUNCTION_NAME;
    }
    export(spans, done) {
        if (this.isShutdown) {
            done({
                code: ExportResultCode.FAILED,
                error: new Error('Failed to export spans: Exporter shutdown'),
            });
            return;
        }
        // log all spans even if they are not exported as a custom metric
        this.log(spans);
        if (!this.isLambda) {
            done({ code: ExportResultCode.SUCCESS });
            return;
        }
        this.send(spans.filter(({ name }) => SUPPORTED_SPANS.has(name)), done);
    }
    log(spans) {
        for (const span of spans) {
            console.log(JSON.stringify({
                traceId: span.spanContext().traceId,
                parentId: span.parentSpanId,
                traceState: span.spanContext().traceState?.serialize(),
                name: span.name,
                id: span.spanContext().spanId,
                kind: span.kind,
                timestamp: hrTimeToTimeStamp(span.startTime),
                duration: hrTimeToMilliseconds(span.duration),
                attributes: span.attributes,
                status: span.status,
                events: span.events,
                links: span.links,
            }));
        }
    }
    send(spans, done) {
        this.metricsSender.send(spans.map(toCustomMetrics).flat());
        done({ code: ExportResultCode.SUCCESS });
    }
    async shutdown() {
        this.isShutdown = true;
    }
}
//# sourceMappingURL=aws-exporter.js.map