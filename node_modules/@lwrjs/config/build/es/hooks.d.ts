import type { GlobalData, HooksPlugin, NormalizedLwrGlobalConfig, RuntimeEnvironment } from '@lwrjs/types';
/**
 * Run `initConfigs` hooks
 *
 * @remarks
 * Route normalization and validation will be executed after all config hooks have been executed.
 *
 * @privateRemarks
 * Changes to configurations are made by reference.
 *
 * @param hooks - hooks plugins
 * @param globalConfig - global configuration
 * @param runtimeEnvironment - runtime environment resolved from programmatic config and config file
 * @param globalData - resolved global data
 */
export declare function executeConfigHooks(hooks: HooksPlugin[], globalConfig: NormalizedLwrGlobalConfig, runtimeEnvironment: RuntimeEnvironment, globalData: GlobalData, skipValidate?: boolean): Promise<void>;
/**
 * Run `onStart` hooks
 *
 * @remarks
 * Route normalization and validation will be executed after all config hooks have been executed.
 *
 * @privateRemarks
 * Changes to configurations are made by reference.
 *
 * These hooks can only modify the `routes` property in the global config.
 *
 * @param hooks - hooks plugins
 * @param globalConfig - global configuration
 */
export declare function executeStartHooks(hooks: HooksPlugin[], globalConfig: NormalizedLwrGlobalConfig, skipValidate?: boolean): void;
export declare function executeInstrumentationHooks(hooks: HooksPlugin[]): boolean;
//# sourceMappingURL=hooks.d.ts.map