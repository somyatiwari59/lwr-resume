var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/config/src/utils/routes.ts
__markAsModule(exports);
__export(exports, {
  normalizeRouteHandlerPaths: () => normalizeRouteHandlerPaths,
  normalizeRouteHandlers: () => normalizeRouteHandlers,
  normalizeRoutePaths: () => normalizeRoutePaths,
  normalizeRoutes: () => normalizeRoutes
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function normalizeRoutes(routes, routeHandlers) {
  return routes.map((route) => {
    if (route.routeHandler) {
      const [handler, options] = typeof route.routeHandler === "string" ? [route.routeHandler, void 0] : route.routeHandler;
      if (!routeHandlers[handler]) {
        routeHandlers[handler] = [handler, options];
      }
      return {
        ...route,
        routeHandler: [handler, options],
        bootstrap: {
          ...import_shared_utils.DEFAULT_LWR_BOOTSTRAP_CONFIG,
          ...route.bootstrap
        }
      };
    }
    return {
      ...route,
      bootstrap: {
        ...import_shared_utils.DEFAULT_LWR_BOOTSTRAP_CONFIG,
        ...route.bootstrap
      }
    };
  });
}
function normalizeRoutePaths(routes = [], resourcePaths) {
  return routes.map((route) => {
    const {contentTemplate, layoutTemplate, subRoutes} = route;
    if (contentTemplate) {
      route.contentTemplate = import_path.default.resolve((0, import_shared_utils.normalizeResourcePath)(contentTemplate, resourcePaths));
    }
    if (layoutTemplate) {
      route.layoutTemplate = import_path.default.resolve((0, import_shared_utils.normalizeResourcePath)(layoutTemplate, resourcePaths));
    }
    if (subRoutes) {
      route.subRoutes = import_path.default.resolve((0, import_shared_utils.normalizeResourcePath)(subRoutes, resourcePaths));
    }
    return route;
  });
}
function normalizeRouteHandlers(routeHandlers) {
  for (const [id, config] of Object.entries(routeHandlers)) {
    if (typeof config === "string") {
      routeHandlers[id] = [config, void 0];
    }
  }
  return routeHandlers;
}
function normalizeRouteHandlerPaths(routeHandlers, resourcePaths) {
  for (const [id, [handler, options]] of Object.entries(routeHandlers)) {
    const normalizedPath = import_path.default.resolve((0, import_shared_utils.normalizeDirectory)(handler, resourcePaths.rootDir));
    if (import_fs.default.existsSync(normalizedPath)) {
      routeHandlers[id] = [normalizedPath, options];
    }
  }
  return routeHandlers;
}
