var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/config/src/index.ts
__markAsModule(exports);
__export(exports, {
  LWC_VERSION: () => import_package.lwcVersion,
  LWR_VERSION: () => import_package.version,
  executeConfigHooks: () => import_hooks.executeConfigHooks,
  executeInstrumentationHooks: () => import_hooks.executeInstrumentationHooks,
  executeStartHooks: () => import_hooks.executeStartHooks,
  getLwrConfigFromFile: () => import_global_config.getLwrConfigFromFile,
  getRuntimeEnvironment: () => import_runtime_config.getRuntimeEnvironment,
  loadConfig: () => import_global_config.loadConfig,
  normalizeConfig: () => import_global_config.resolveGlobalConfig,
  validateLwrAppConfig: () => import_app_config.validateLwrAppConfig
});
var import_package = __toModule(require("@lwrjs/config/package"));
var import_global_config = __toModule(require("./global-config.cjs"));
var import_runtime_config = __toModule(require("./runtime-config.cjs"));
var import_hooks = __toModule(require("./hooks.cjs"));
var import_app_config = __toModule(require("./validation/app-config.cjs"));
