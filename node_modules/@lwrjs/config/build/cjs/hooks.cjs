var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/config/src/hooks.ts
__markAsModule(exports);
__export(exports, {
  executeConfigHooks: () => executeConfigHooks,
  executeInstrumentationHooks: () => executeInstrumentationHooks,
  executeStartHooks: () => executeStartHooks
});
var import_routes = __toModule(require("./utils/routes.cjs"));
var import_app_config = __toModule(require("./validation/app-config.cjs"));
var import_global_config = __toModule(require("./global-config.cjs"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
async function executeConfigHooks(hooks, globalConfig, runtimeEnvironment, globalData, skipValidate = false) {
  const span = (0, import_instrumentation.getTracer)().startSpan({name: import_instrumentation.ConfigSpan.ExecuteConfigHooks});
  if (!hooks.length) {
    span.end();
    return;
  }
  for (const hook of hooks) {
    if (!hook.initConfigs) {
      continue;
    }
    await hook.initConfigs(globalConfig, globalData, runtimeEnvironment);
  }
  globalConfig.routes = (0, import_routes.normalizeRoutes)(globalConfig.routes, globalConfig.routeHandlers);
  globalConfig.errorRoutes = (0, import_routes.normalizeRoutes)(globalConfig.errorRoutes, globalConfig.routeHandlers);
  const ssrConfig = (0, import_global_config.applySsrConfig)(globalConfig);
  globalConfig.moduleProviders = ssrConfig.moduleProviders;
  globalConfig.viewTransformers = ssrConfig.viewTransformers;
  if (!skipValidate) {
    (0, import_app_config.validateLwrAppConfig)(globalConfig, "post");
  }
  span.end();
}
function executeStartHooks(hooks, globalConfig, skipValidate = false) {
  const span = (0, import_instrumentation.getTracer)().startSpan({name: import_instrumentation.ConfigSpan.ExecuteStartHooks});
  if (!hooks.length) {
    span.end();
    return;
  }
  for (const hook of hooks) {
    if (!hook.onStart) {
      continue;
    }
    hook.onStart(globalConfig.routes);
  }
  globalConfig.routes = (0, import_routes.normalizeRoutes)(globalConfig.routes, globalConfig.routeHandlers);
  const ssrConfig = (0, import_global_config.applySsrConfig)(globalConfig);
  globalConfig.moduleProviders = ssrConfig.moduleProviders;
  globalConfig.viewTransformers = ssrConfig.viewTransformers;
  if (!skipValidate) {
    (0, import_app_config.validateLwrAppConfig)(globalConfig, "post");
  }
  span.end();
}
function executeInstrumentationHooks(hooks) {
  const span = (0, import_instrumentation.getTracer)().startSpan({name: import_instrumentation.ConfigSpan.ExecuteInstrHooks});
  let retVal = false;
  for (const hook of hooks) {
    if (!hook.initInstrumentation) {
      continue;
    }
    retVal = true;
    hook.initInstrumentation();
  }
  span.end();
  return retVal;
}
