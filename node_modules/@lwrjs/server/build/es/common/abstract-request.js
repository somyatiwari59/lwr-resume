export class AbstractMiddlewareRequest {
    constructor(isSiteGenerationRequest) {
        this.isSiteGenerationRequest = isSiteGenerationRequest || false;
    }
    cookie(key) {
        // Does not require the cookie-parser middleware
        const rawCookies = (this.headers.cookie?.split(';') || []).map((c) => c.trim());
        const rawCookie = rawCookies.find((c) => c.startsWith(`${key}=`));
        return rawCookie ? decodeURIComponent(rawCookie.replace(`${key}=`, '')) : undefined;
    }
    isSiteGeneration() {
        return this.isSiteGenerationRequest;
    }
    hasJsonParam() {
        return this.query.json !== undefined;
    }
    isJsonRequest() {
        const acceptHeader = this.headers?.accept || '';
        const hasJsonHeader = acceptHeader.indexOf('application/json') >= 0;
        return hasJsonHeader || this.query.json !== undefined;
    }
    validateJsonRequest() {
        const hasJsonQueryParam = this.hasJsonParam();
        const hasAcceptHeader = this.headers?.accept !== undefined;
        const hasJsonAcceptHeader = hasAcceptHeader && this.headers?.accept?.includes('application/json');
        return ((!hasAcceptHeader && !hasJsonQueryParam) ||
            hasJsonQueryParam !== hasAcceptHeader ||
            hasJsonQueryParam === hasJsonAcceptHeader);
    }
    validateEnvironmentRequest(config) {
        const targetEnvironment = this.params.environment;
        const defaultEnvironment = config.environment.default;
        const supportedEnvironments = config.environment.supported || [];
        return (!targetEnvironment ||
            targetEnvironment === defaultEnvironment ||
            supportedEnvironments?.includes(targetEnvironment));
    }
    getRuntimeContext(defaultRuntimeEnvironment) {
        const { format, apiVersion, compat, locale, environment, bundleSpecifier } = this.params;
        const debug = this.query.debug !== undefined;
        const bundle = !!bundleSpecifier;
        const runtimeEnvironment = {
            ...defaultRuntimeEnvironment,
            // override default runtime environment with request parameters
            format: format || defaultRuntimeEnvironment.format,
            compat: compat || defaultRuntimeEnvironment.compat,
            debug: debug || defaultRuntimeEnvironment.debug,
            apiVersion: apiVersion || defaultRuntimeEnvironment.apiVersion,
            bundle: bundle || defaultRuntimeEnvironment.bundle,
        };
        const runtimeParams = {
            locale: locale || this.locale || defaultRuntimeEnvironment.defaultLocale,
            environment,
        };
        return {
            runtimeEnvironment,
            runtimeParams,
        };
    }
}
//# sourceMappingURL=abstract-request.js.map