var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/server/src/common/abstract-request.ts
__markAsModule(exports);
__export(exports, {
  AbstractMiddlewareRequest: () => AbstractMiddlewareRequest
});
var AbstractMiddlewareRequest = class {
  constructor(isSiteGenerationRequest) {
    this.isSiteGenerationRequest = isSiteGenerationRequest || false;
  }
  cookie(key) {
    const rawCookies = (this.headers.cookie?.split(";") || []).map((c) => c.trim());
    const rawCookie = rawCookies.find((c) => c.startsWith(`${key}=`));
    return rawCookie ? decodeURIComponent(rawCookie.replace(`${key}=`, "")) : void 0;
  }
  isSiteGeneration() {
    return this.isSiteGenerationRequest;
  }
  hasJsonParam() {
    return this.query.json !== void 0;
  }
  isJsonRequest() {
    const acceptHeader = this.headers?.accept || "";
    const hasJsonHeader = acceptHeader.indexOf("application/json") >= 0;
    return hasJsonHeader || this.query.json !== void 0;
  }
  validateJsonRequest() {
    const hasJsonQueryParam = this.hasJsonParam();
    const hasAcceptHeader = this.headers?.accept !== void 0;
    const hasJsonAcceptHeader = hasAcceptHeader && this.headers?.accept?.includes("application/json");
    return !hasAcceptHeader && !hasJsonQueryParam || hasJsonQueryParam !== hasAcceptHeader || hasJsonQueryParam === hasJsonAcceptHeader;
  }
  validateEnvironmentRequest(config) {
    const targetEnvironment = this.params.environment;
    const defaultEnvironment = config.environment.default;
    const supportedEnvironments = config.environment.supported || [];
    return !targetEnvironment || targetEnvironment === defaultEnvironment || supportedEnvironments?.includes(targetEnvironment);
  }
  getRuntimeContext(defaultRuntimeEnvironment) {
    const {format, apiVersion, compat, locale, environment, bundleSpecifier} = this.params;
    const debug = this.query.debug !== void 0;
    const bundle = !!bundleSpecifier;
    const runtimeEnvironment = {
      ...defaultRuntimeEnvironment,
      format: format || defaultRuntimeEnvironment.format,
      compat: compat || defaultRuntimeEnvironment.compat,
      debug: debug || defaultRuntimeEnvironment.debug,
      apiVersion: apiVersion || defaultRuntimeEnvironment.apiVersion,
      bundle: bundle || defaultRuntimeEnvironment.bundle
    };
    const runtimeParams = {
      locale: locale || this.locale || defaultRuntimeEnvironment.defaultLocale,
      environment
    };
    return {
      runtimeEnvironment,
      runtimeParams
    };
  }
};
