import { ComponentDef } from './def';
import { VM, Context } from './vm';
import { VNodeData } from './vnodes';
type ServiceCallback = (component: object, data: VNodeData, def: ComponentDef, context: Context) => void;
interface ServiceDef {
    connected?: ServiceCallback;
    disconnected?: ServiceCallback;
    rendered?: ServiceCallback;
}
export declare const Services: {
    connected?: ServiceCallback[];
    disconnected?: ServiceCallback[];
    rendered?: ServiceCallback[];
};
/**
 * EXPERIMENTAL: This function allows for the registration of "services"
 * in LWC by exposing hooks into the component life-cycle. This API is
 * subject to change or being removed.
 */
export declare function register(service: ServiceDef): void;
export declare function invokeServiceHook(vm: VM, cbs: ServiceCallback[]): void;
export {};
