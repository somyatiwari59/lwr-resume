import { SlotSet } from './vm';
import { LightningElementConstructor } from './base-lightning-element';
import { VNode, VNodes, VElement, VText, VCustomElement, VComment, VElementData, VStatic, Key, VFragment, VScopedSlotFragment, VStaticElementData } from './vnodes';
declare function ssf(slotName: unknown, factory: (value: any, key: any) => VFragment): VScopedSlotFragment;
declare function st(fragment: Element, key: Key, data?: VStaticElementData): VStatic;
declare function fr(key: Key, children: VNodes, stable: 0 | 1): VFragment;
declare function h(sel: string, data: VElementData, children?: VNodes): VElement;
declare function ti(value: any): number;
declare function s(slotName: string, data: VElementData, children: VNodes, slotset: SlotSet | undefined): VElement | VNodes;
declare function c(sel: string, Ctor: LightningElementConstructor, data: VElementData, children?: VNodes): VCustomElement;
declare function i(iterable: Iterable<any>, factory: (value: any, index: number, first: boolean, last: boolean) => VNodes | VNode): VNodes;
/**
 * [f]lattening
 */
declare function f(items: Readonly<Array<Readonly<Array<VNodes>> | VNodes>>): VNodes;
declare function t(text: string): VText;
declare function co(text: string): VComment;
declare function d(value: any): string;
declare function b(fn: EventListener): EventListener;
declare function k(compilerKey: number, obj: any): string | void;
declare function gid(id: string | undefined | null): string | null | undefined;
declare function fid(url: string | undefined | null): string | null | undefined;
/**
 * [ddc] - create a (deprecated) dynamic component via `<x-foo lwc:dynamic={Ctor}>`
 *
 * TODO [#3331]: remove usage of lwc:dynamic in 246
 */
declare function ddc(sel: string, Ctor: LightningElementConstructor | null | undefined, data: VElementData, children?: VNodes): VCustomElement | null;
/**
 * [dc] - create a dynamic component via `<lwc:component lwc:is={Ctor}>`
 */
declare function dc(Ctor: LightningElementConstructor | null | undefined, data: VElementData, children?: VNodes): VCustomElement | null;
export type SanitizeHtmlContentHook = (content: unknown) => string;
/**
 * Sets the sanitizeHtmlContentHook.
 */
export declare function setSanitizeHtmlContentHook(newHookImpl: SanitizeHtmlContentHook): void;
declare function shc(content: unknown): string;
declare const api: Readonly<{
    s: typeof s;
    h: typeof h;
    c: typeof c;
    i: typeof i;
    f: typeof f;
    t: typeof t;
    d: typeof d;
    b: typeof b;
    k: typeof k;
    co: typeof co;
    dc: typeof dc;
    fr: typeof fr;
    ti: typeof ti;
    st: typeof st;
    gid: typeof gid;
    fid: typeof fid;
    shc: typeof shc;
    ssf: typeof ssf;
    ddc: typeof ddc;
}>;
export default api;
export type RenderAPI = typeof api;
