import type { VM } from './vm';
import type { RendererAPI } from './renderer';
export type Key = string | number;
export declare const enum VNodeType {
    Text = 0,
    Comment = 1,
    Element = 2,
    CustomElement = 3,
    Static = 4,
    Fragment = 5,
    ScopedSlotFragment = 6
}
export type VNode = VText | VComment | VElement | VCustomElement | VStatic | VFragment | VScopedSlotFragment;
export type VNodes = Readonly<Array<VNode | null>>;
export interface BaseVParent {
    children: VNodes;
}
export interface BaseVNode {
    type: VNodeType;
    elm: Node | undefined;
    sel: string | undefined;
    key: Key | undefined;
    owner: VM;
}
export interface VScopedSlotFragment extends BaseVNode {
    factory: (value: any, key: any) => VFragment;
    type: VNodeType.ScopedSlotFragment;
    slotName: unknown;
}
export type VStaticElementData = Pick<VElementData, 'on' | 'ref'>;
export interface VStatic extends BaseVNode {
    readonly type: VNodeType.Static;
    readonly sel: undefined;
    readonly key: Key;
    readonly fragment: Element;
    readonly data: VStaticElementData | undefined;
    elm: Element | undefined;
}
export interface VFragment extends BaseVNode, BaseVParent {
    sel: undefined;
    type: VNodeType.Fragment;
    stable: 0 | 1;
    leading: VText;
    trailing: VText;
}
export interface VText extends BaseVNode {
    type: VNodeType.Text;
    sel: undefined;
    text: string;
    key: undefined;
}
export interface VComment extends BaseVNode {
    type: VNodeType.Comment;
    sel: undefined;
    text: string;
    key: 'c';
}
export interface VBaseElement extends BaseVNode, BaseVParent {
    sel: string;
    data: VElementData;
    elm: Element | undefined;
    key: Key;
}
export interface VElement extends VBaseElement {
    type: VNodeType.Element;
}
export interface VCustomElement extends VBaseElement {
    type: VNodeType.CustomElement;
    mode: 'closed' | 'open';
    ctor: any;
    aChildren: VNodes | undefined;
    vm: VM | undefined;
}
export interface VNodeData {
    readonly props?: Readonly<Record<string, any>>;
    readonly attrs?: Readonly<Record<string, string | number | boolean | null | undefined>>;
    readonly className?: string;
    readonly style?: string;
    readonly classMap?: Readonly<Record<string, boolean>>;
    readonly styleDecls?: Readonly<Array<[string, string, boolean]>>;
    readonly context?: Readonly<Record<string, Readonly<Record<string, any>>>>;
    readonly on?: Readonly<Record<string, (event: Event) => any>>;
    readonly svg?: boolean;
    readonly renderer?: RendererAPI;
    readonly spread?: Readonly<Record<string, any>>;
}
export interface VElementData extends VNodeData {
    readonly key: Key;
    readonly external?: boolean;
    readonly ref?: string;
    readonly slotData?: any;
}
export declare function isVBaseElement(vnode: VNode): vnode is VElement | VCustomElement;
export declare function isSameVnode(vnode1: VNode, vnode2: VNode): boolean;
export declare function isVCustomElement(vnode: VNode | VBaseElement): vnode is VCustomElement;
export declare function isVFragment(vnode: VNode): vnode is VFragment;
export declare function isVScopedSlotFragment(vnode: VNode): vnode is VScopedSlotFragment;
