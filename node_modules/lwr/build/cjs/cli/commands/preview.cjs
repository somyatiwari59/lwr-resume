var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/lwr/src/cli/commands/preview.ts
__markAsModule(exports);
__export(exports, {
  createPreviewCommand: () => createPreviewCommand
});
var import_path = __toModule(require("path"));
var import_child_process = __toModule(require("child_process"));
var import_commander = __toModule(require("commander"));
var import_chalk = __toModule(require("chalk"));
var import_express = __toModule(require("express"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_utils = __toModule(require("../utils.cjs"));
function createPreviewCommand() {
  return new import_commander.Command("preview").aliases(["start"]).description("Preview your built server on the specified target environment").addOption((0, import_utils.getPortOption)()).addOption((0, import_utils.getModeOption)()).addOption((0, import_utils.getTargetOption)()).option("-b, --buildDir <string>", "[string] The prebuilt directory for your site").option("-o, --open", `[boolean] open browser on startup`, false).action(async (options, cmd) => {
    try {
      const {rootDir, config, port, target, mode, buildDir, open} = cmd.optsWithGlobals();
      const serverMode = mode;
      if (buildDir && !import_fs_extra.default.existsSync(buildDir)) {
        throw new Error(`specified build directory '${buildDir}' does not exist`);
      }
      const dir = buildDir ? buildDir : (0, import_utils.getDefaultBuildDirectory)(rootDir, config, target);
      if (target === "mrt") {
        const ssrJs = import_path.default.join(dir, "ssr.js");
        if (import_fs_extra.default.existsSync(ssrJs)) {
          (0, import_child_process.execSync)(`node ${ssrJs}`, {
            env: {
              ...process.env
            },
            stdio: "inherit"
          });
        } else {
          throw new Error(`cannot find ssr.js in build directory '${dir}'`);
        }
      } else {
        const {createServer} = await Promise.resolve().then(() => __toModule(require("@lwrjs/core")));
        const server = createServer({port, serverMode, rootDir, lwrConfigFile: config});
        const internalServer = server.getInternalServer();
        if (import_fs_extra.default.existsSync(dir)) {
          import_shared_utils.logger.info("Using prebuilt content from directory: " + dir);
          internalServer.use(import_express.default.static(dir));
        }
        await server.listen(async ({serverMode: serverMode2, port: port2}) => {
          console.log(import_chalk.default.green(`Running LWR at: http://localhost:${port2} | mode: ${serverMode2}`));
          if (open) {
            await (0, import_utils.launch)(port2);
          }
        });
      }
    } catch (error) {
      import_shared_utils.logger.error(error);
      process.exit(1);
    }
  });
}
