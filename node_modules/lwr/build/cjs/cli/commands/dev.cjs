var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/lwr/src/cli/commands/dev.ts
__markAsModule(exports);
__export(exports, {
  createDevCommand: () => createDevCommand
});
var import_commander = __toModule(require("commander"));
var import_chalk = __toModule(require("chalk"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_utils = __toModule(require("../utils.cjs"));
function createDevCommand() {
  return new import_commander.Command("dev").description("Starts an LWR server (defaults to dev mode)").addOption((0, import_utils.getPortOption)()).addOption((0, import_utils.getModeOption)().default("dev")).option("-o, --open", `[boolean] open browser on startup`, false).action(async (options, cmd) => {
    const {createServer} = await Promise.resolve().then(() => __toModule(require("@lwrjs/core")));
    const {port, mode, rootDir, config, open} = cmd.optsWithGlobals();
    try {
      const server = createServer({port, serverMode: mode, rootDir, lwrConfigFile: config});
      await server.listen(async ({serverMode, port: port2}) => {
        console.log(import_chalk.default.green(`Running LWR at: http://localhost:${port2} | mode: ${serverMode}`));
        if (open) {
          await (0, import_utils.launch)(port2);
        }
      });
    } catch (error) {
      import_shared_utils.logger.error(error);
      process.exit(1);
    }
  });
}
