import path from 'path';
import { execSync } from 'child_process';
import { Command } from 'commander';
import chalk from 'chalk';
import express from 'express';
import fs from 'fs-extra';
import { logger } from '@lwrjs/shared-utils';
import { getDefaultBuildDirectory, getModeOption, getPortOption, getTargetOption, launch } from '../utils.js';
export function createPreviewCommand() {
    return new Command('preview')
        .aliases(['start'])
        .description('Preview your built server on the specified target environment')
        .addOption(getPortOption())
        .addOption(getModeOption())
        .addOption(getTargetOption())
        .option('-b, --buildDir <string>', '[string] The prebuilt directory for your site')
        .option('-o, --open', `[boolean] open browser on startup`, false)
        .action(async (options, cmd) => {
        try {
            const { rootDir, config, port, target, mode, buildDir, open } = cmd.optsWithGlobals();
            const serverMode = mode;
            // if you specified a buildDir in CLI and it doesn't exist, throw an error
            if (buildDir && !fs.existsSync(buildDir)) {
                throw new Error(`specified build directory '${buildDir}' does not exist`);
            }
            // Get the proper build directory
            const dir = buildDir ? buildDir : getDefaultBuildDirectory(rootDir, config, target);
            // The `open` option is not used when target === mrt because `pwa-kit` launches the browser.
            // The following env var will prevent `pwa-kit` from opening the browser, but we should work with
            // them on a better api to control this:
            // `process.env.NODE_ENV = 'test';`
            if (target === 'mrt') {
                const ssrJs = path.join(dir, 'ssr.js');
                // If ssr.js exists, run it
                if (fs.existsSync(ssrJs)) {
                    execSync(`node ${ssrJs}`, {
                        env: {
                            ...process.env,
                        },
                        stdio: 'inherit',
                    });
                }
                else {
                    // If no ssr js, throw an error
                    throw new Error(`cannot find ssr.js in build directory '${dir}'`);
                }
            }
            else {
                // Not mrt, just launch LWR server
                const { createServer } = await import('@lwrjs/core');
                const server = createServer({ port, serverMode, rootDir, lwrConfigFile: config });
                const internalServer = server.getInternalServer();
                // TODO we could just run a static server vs running LWR services here
                if (fs.existsSync(dir)) {
                    // Use static directory if it exists
                    logger.info('Using prebuilt content from directory: ' + dir);
                    internalServer.use(express.static(dir));
                }
                await server.listen(async ({ serverMode, port }) => {
                    console.log(chalk.green(`Running LWR at: http://localhost:${port} | mode: ${serverMode}`));
                    if (open) {
                        await launch(port);
                    }
                });
            }
        }
        catch (error) {
            logger.error(error);
            process.exit(1);
        }
    });
}
//# sourceMappingURL=preview.js.map