import { release } from 'os';
import { Option, InvalidArgumentError } from 'commander';
import { getLwrConfigFromFile } from '@lwrjs/config';
export async function launch(port, https) {
    const { exec } = await import('child_process');
    let cmd = 'open';
    if (process.platform == 'win32') {
        cmd = 'start';
    }
    else if (process.platform == 'linux') {
        if (/microsoft/i.test(release())) {
            cmd = 'cmd.exe /c start';
        }
        else {
            cmd = 'xdg-open';
        }
    }
    exec(`${cmd} ${https ? 'https' : 'http'}://localhost:${port}`);
}
export function getTargetOption() {
    return new Option('-t, --target <target>', '[string] configured target for deployment')
        .choices(['default', 'mrt', 'netlify'])
        .default('default');
}
export function getPortOption() {
    return new Option('-p, --port <number>', `[number] set port`).env('PORT').argParser(parseNumArg);
}
export function getModeOption() {
    return new Option('-m, --mode <mode>', '[string] server mode')
        .env('MODE')
        .choices(['dev', 'compat', 'prod-compat', 'prod']);
}
export function getDefaultBuildDirectory(rootDir, configFile, target) {
    // need to get raw config so we know if user has declared a default
    const rawConfig = getLwrConfigFromFile(rootDir, configFile);
    let buildDir = rawConfig?.staticSiteGenerator?.outputDir;
    if (!buildDir) {
        // Default based on target
        buildDir = target === 'mrt' ? 'app' : 'site';
    }
    return buildDir;
}
export function parseNumArg(value) {
    const parsedValue = parseInt(value, 10);
    if (isNaN(parsedValue)) {
        throw new InvalidArgumentError('Not a number.');
    }
    return parsedValue;
}
//# sourceMappingURL=utils.js.map